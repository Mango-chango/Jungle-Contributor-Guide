"use strict";(self.webpackChunkjungle_wiki=self.webpackChunkjungle_wiki||[]).push([[826],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4825:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={sidebar_position:2,sidebar_label:"Contribution Guidelines"},s="Contribution Guidelines",u={unversionedId:"version-control/version-control",id:"version-control/version-control",title:"Contribution Guidelines",description:"Repositories",source:"@site/docs/version-control/version-control.md",sourceDirName:"version-control",slug:"/version-control/",permalink:"/Jungle-Contributor-Guide/docs/version-control/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/version-control/version-control.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Contribution Guidelines"},sidebar:"tutorialSidebar",previous:{title:"Writing a User Story",permalink:"/Jungle-Contributor-Guide/docs/user-stories/"}},c={},p=[{value:"Repositories",id:"repositories",level:2},{value:"Branching Strategy",id:"branching-strategy",level:2},{value:"Repository Best Practices",id:"repository-best-practices",level:2},{value:"Pull Request Guidelines",id:"pull-request-guidelines",level:2},{value:"Typescript Best Practices",id:"typescript-best-practices",level:2}],d={toc:p};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"contribution-guidelines"},"Contribution Guidelines"),(0,o.kt)("h2",{id:"repositories"},"Repositories"),(0,o.kt)("p",null,"Jungle's Project Repositories are divided into:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Mango-chango/Jungle-Infrastructure"},"Infrastructure Repository")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Mango-chango/Jungle-Contributor-Guide"},"Backend and Frontend Mono Repository")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Mango-chango/Jungle-Contributor-Guide"},"Documentation/Wiki Repository"))),(0,o.kt)("p",null,"If you don't have access to this repos you can contact you're immediate Manager, instructions to build and start your local environment can be found in each repository README file."),(0,o.kt)("h2",{id:"branching-strategy"},"Branching Strategy"),(0,o.kt)("p",null,"We stick as much a possible to the Gitflow Workflow:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"master branch:")," is the one that is deployed to production")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"dev branch:")," is the QA branch, it's the one deployed to qa/dev server and contains features that are going to be released to production")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"feature branch:")," for each new task a feature branch is created from dev branch and its merged back to dev branch when the work is done")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"bug-fix branch:")," (when the fix is going to come with all the features in the normal sprint release), bug-fix branches are created from dev branch and its merged back to dev branch when the work is done")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"hot-fix branch:")," (when the fix needs to be populated to production quickly and can't wait to the standard sprint release), hot-fix branches are created from master, when the work is done it's merged back to master and also to dev"))),(0,o.kt)("h2",{id:"repository-best-practices"},"Repository Best Practices"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Write comprehensive and robust tests that cover the changes you've made in your work."),(0,o.kt)("li",{parentName:"ul"},"Follow the appropriate code style standards for the language and framework you're using."),(0,o.kt)("li",{parentName:"ul"},"Write readable code \u2013 keep functions small and modular and name variables descriptively."),(0,o.kt)("li",{parentName:"ul"},"Document your code thoroughly."),(0,o.kt)("li",{parentName:"ul"},"Make sure all the existing tests pass."),(0,o.kt)("li",{parentName:"ul"},"User-facing code should support the following browsers:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Chrome (Webkit-Blink / 22+)"),(0,o.kt)("li",{parentName:"ul"},"Firefox (Gecko / 28+)"),(0,o.kt)("li",{parentName:"ul"},"Edge (Chromium based / 12+)"),(0,o.kt)("li",{parentName:"ul"},"Opera (Chromium-Blink / 12.1+)"),(0,o.kt)("li",{parentName:"ul"},"Safari (Apple\u2019s Webkit / 7+)"),(0,o.kt)("li",{parentName:"ul"},"IE 11 (Trident)")))),(0,o.kt)("h2",{id:"pull-request-guidelines"},"Pull Request Guidelines"),(0,o.kt)("p",null,"In order to create a new Pull Request to merge your changes you have to follow this instructions:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Make A branch"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Always create a separate branch for each ticket/user-story/issue that you're working on.\nDo not make changes directly to develop or master branch."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Push Your Code ",(0,o.kt)("strong",{parentName:"p"},"ASAP")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},'Push your code as soon as you can. Follow the "',(0,o.kt)("a",{parentName:"li",href:"https://www.worklytics.co/blog/commit-early-push-often"},"early and often"),'" rule".'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Name your Pull request"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Name your pull request like this: ","[",(0,o.kt)("strong",{parentName:"li"},"user-story-id"),"]",": ",(0,o.kt)("strong",{parentName:"li"},"Brief User Story Description")),(0,o.kt)("li",{parentName:"ul"},"Then ",(0,o.kt)("strong",{parentName:"li"},'mark the title with a "',"[WIP]",'"')))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Describe your Pull Request"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use the following format template in your pull request:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"### Description\nIssue #\n\n### Screenshots (if applicable)\n\n### Developer Checklist\n#### About the feature or bug being resolved\n-[ ] I have read the original request and all the comments in the user story\n#### About the code and development practices\n-[ ] I followed our naming conventions to name all variables, classes, fields, tags, etcetera.\n-[ ] I followed the rules we have in place to store files in the right folder in the project structure\n-[ ] I have removed any dead code or development testing artifacts (unused folders, console.log messages, testing/hardcoded values)\n-[ ] All API credentials and third party URLs are located in the right place\n-[ ] I have added the data-testid tag in the DOM elements that need it, according to the specifications\n#### Documentation\n-[ ] I have added the necessary comments to the original ticket with all my questions, concerns, and suggestions\n-[ ] I left proper inline comments when/where necessary so other developers can understand what\u2019s going on\n#### Before merging\n-[ ] I have rebased my branch off the source branch (pull before push)\n-[ ] My commit messages are insightful and relevant\n-[ ] I added the necessary context for the reviewers to be able to understand what is being resolved and how (inside Merge Request)\n#### Testing\n-[ ] I have tested my solution locally in Chrome, Safari, and Edge.\n-[ ] If I'm not able to test in some browser, I have tested with the QA Team.\n-[ ] I have passed my linting checks.\n")),(0,o.kt)("p",{parentName:"li"},"This Pull request template has to be populated as requested, for Jungle's Frontend Repo this pull request is automatically created whenever a new Pull request is created, you only have to fill the Information and check boxes. "))),(0,o.kt)("h2",{id:"typescript-best-practices"},"Typescript Best Practices"),(0,o.kt)("p",null,"Typescript best coding practices will be enforced by default using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint"},"ESlint")," and ",(0,o.kt)("a",{parentName:"p",href:"https://prettier.io/"},"Prettier"),". ESlint is a Library that helps while coding typescript to ensure the best practices are implemented in order to have:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Simplicity"),(0,o.kt)("li",{parentName:"ol"},"Stability"),(0,o.kt)("li",{parentName:"ol"},"Focus"),(0,o.kt)("li",{parentName:"ol"},"Maintainability")),(0,o.kt)("p",null,"At the moment we don't follow any practices like Clean Code, we only expect developers to follow the ESLint and Prettier rules."))}m.isMDXComponent=!0}}]);